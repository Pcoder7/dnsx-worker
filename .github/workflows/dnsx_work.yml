name: Parallel DNSX Recon

on:
  workflow_dispatch:

permissions:
  contents: write
  actions: write

jobs:
  prepare_matrix:
    runs-on: ubuntu-latest

    
    outputs:
      domains_json: ${{ steps.set_matrix.outputs.domains_json }}   
      
    steps:
      - name: Checkout private store-recon (other account)
        uses: actions/checkout@v3
        with:
          repository: pushrockzz/store-recon
          token: ${{ secrets.STORE_RECON_PAT }}
          path: store-recon
          fetch-depth: 0
      
      - name: Gather domain names with non-empty all_resolved.txt
        id: set_matrix
        shell: bash
        run: |
          shopt -s nullglob
          domain_dirs_temp=()
          # For each store-recon/results/<domain>/all_resolved.txt that exists and is non-empty,
          # collect the "<domain>" folder name.
          for f in $(find store-recon/results -mindepth 2 -maxdepth 2 -type f -name 'all_resolved.txt'); do
            if [ -s "$f" ]; then
              # Robustly get the parent directory name of all_resolved.txt
              # e.g., if f = store-recon/results/example.com/all_resolved.txt
              # dirname "$f" -> store-recon/results/example.com
              # basename "..." -> example.com
              domain_folder_name=$(basename "$(dirname "$f")")
              if [ -n "$domain_folder_name" ]; then # Ensure it's not empty
                domain_dirs_temp+=("$domain_folder_name")
              fi
            fi
          done
          
          # To get unique values, sort and uniq, then mapfile
          mapfile -t domain_dirs < <(printf "%s\n" "${domain_dirs_temp[@]}" | sort -u)

          if [ "${#domain_dirs[@]}" -eq 0 ]; then
            domains_json="[]"
          else
            domains_json=$(printf '%s\n' "${domain_dirs[@]}" \
              | jq -R -s -c 'split("\n") | map(select(length > 0))')
          fi

          echo "DEBUG: domains_json is: $domains_json"
          echo "domains_json=$domains_json" >> $GITHUB_OUTPUT     

      - name: Debug raw JSON
        run: echo "-> RAW domains_json ${{ steps.set_matrix.outputs.domains_json }}"        

  dnsx_recon:
    needs: prepare_matrix
    runs-on: ubuntu-latest
    container:
      image: ghcr.io/pcoder7/spider-puredns-actions:latest
      credentials:
        username: ${{ github.actor }}
        password: ${{ secrets.GHCR_TOKEN }}        
    if: ${{ needs.prepare_matrix.outputs.domains_json != '[]' }}
    env:
      LINES_PER_CHUNK: 1000 

    strategy:
      matrix:
        domain: ${{ fromJson(needs.prepare_matrix.outputs.domains_json) }}

    steps:
      - name: Checkout private store-recon (other account)
        uses: actions/checkout@v3
        with:
          repository: pushrockzz/store-recon
          token: ${{ secrets.STORE_RECON_PAT }}
          path: store-recon
          fetch-depth: 0

      - name: Prepare working directories for ${{ matrix.domain }}
        run: |
          
          DOMAIN="${{ matrix.domain }}"
          echo "Running DNSX recon for domain: $DOMAIN"
          mkdir -p work/${DOMAIN}
          mkdir -p results/${DOMAIN}
          

      - name: Copy all_resolved.txt for ${{ matrix.domain }}
        run: |

          DOMAIN="${{ matrix.domain }}"
          cp "store-recon/results/${DOMAIN}/all_resolved.txt" "work/${DOMAIN}/all_resolved.txt"

      - name: Split all_resolved.txt into chunks
        shell: bash
        run: |
          
         
          DOMAIN="${{ matrix.domain }}"
          INPUT_FILE="work/${DOMAIN}/all_resolved.txt"
          CHUNKS_DIR="work/${DOMAIN}/chunks"


          # Initial debug checks (these were good to have)
          echo "DEBUG: Received matrix.domain = '${{ matrix.domain }}'"
          if [ -z "${{ matrix.domain }}" ]; then
            echo "ERROR: matrix.domain is empty! This should not happen if prepare_matrix is working correctly."
            exit 1
          fi
          
          echo "DEBUG: DOMAIN variable is set to '${DOMAIN}'" # Verifies DOMAIN from matrix.domain
          echo "DEBUG: INPUT_FILE is being set to '${INPUT_FILE}'"
          echo "DEBUG: CHUNKS_DIR is being set to '${CHUNKS_DIR}'"

          if [ -z "${CHUNKS_DIR}" ] && [ -n "${DOMAIN}" ]; then
            echo "ERROR: CHUNKS_DIR is empty even though DOMAIN ('${DOMAIN}') is not. This is unexpected."
            exit 1
          elif [ -z "${CHUNKS_DIR}" ] && [ -z "${DOMAIN}" ]; then
            echo "ERROR: CHUNKS_DIR is empty because DOMAIN is empty (problem from matrix.domain)."
            exit 1
          fi
          # --- End initial debug checks ---

          # Now that CHUNKS_DIR is defined, this mkdir can work
          mkdir -p "${CHUNKS_DIR}" 
          
          # Your existing file existence and emptiness checks (these are good)
          if [ ! -f "${INPUT_FILE}" ]; then
            echo "Error: Input file '${INPUT_FILE}' does not exist or is not a regular file."
            echo "This file was expected to be created by the 'Copy all_resolved.txt' step."
            # It's useful to see what's in the expected parent directory
            if [ -d "$(dirname "${INPUT_FILE}")" ]; then
              echo "Contents of $(dirname "${INPUT_FILE}"):"
              ls -l "$(dirname "${INPUT_FILE}")"
            else
              echo "Parent directory $(dirname "${INPUT_FILE}") does not exist."
            fi
            # Also useful to see if the 'work' directory for the domain was created at all
            if [ -d "work/${DOMAIN}" ]; then
                echo "Contents of work/${DOMAIN}/:"
                ls -l "work/${DOMAIN}/"
            else
                echo "Directory work/${DOMAIN}/ does not exist."
            fi
            exit 1
          fi
          if [ ! -s "${INPUT_FILE}" ]; then
            echo "Warning: Input file '${INPUT_FILE}' is empty."
            # If the input file is empty, wc -l will output 0.
            # The logic below will then copy the empty file to chunk_01.txt, which is reasonable.
          fi             
          
          total_lines=$(wc -l < "${INPUT_FILE}")
          
          # Use the environment variable LINES_PER_CHUNK
          # The job-level 'env' block should ensure LINES_PER_CHUNK is set.
          # Using it directly assumes it's always set and numeric.
          # For safety, you can still use a default, but the env block is the primary source.
          CURRENT_CHUNK_SIZE=${LINES_PER_CHUNK:-1000} # Fallback if LINES_PER_CHUNK is somehow unset/empty
          
          echo "DEBUG: Total lines in ${INPUT_FILE}: $total_lines"
          echo "DEBUG: LINES_PER_CHUNK from env: '${LINES_PER_CHUNK}'" 
          echo "DEBUG: Using CHUNK_SIZE: $CURRENT_CHUNK_SIZE"
          
          total_lines_numeric=$(echo "$total_lines" | awk '{print $1}')
          
          # This comprehensive check for total_lines_numeric was good.
          if [ -z "$total_lines_numeric" ] && [ "$total_lines_numeric" != "0" ]; then # Check if empty string AND not "0"
              echo "Error: Could not determine total lines from ${INPUT_FILE}, or it's not a numeric value."
              if [ ! -f "${INPUT_FILE}" ] || [ ! -r "${INPUT_FILE}" ]; then # This check is somewhat redundant due to earlier one
                echo "Error: Input file ${INPUT_FILE} does not exist or is not readable (secondary check)."
                exit 1
              # If INPUT_FILE exists but wc -l failed to produce a number (highly unlikely for existing files)
              else
                echo "Error: 'total_lines_numeric' is empty or non-numeric after processing wc -l output. wc -l output was: '$total_lines'. This is unexpected."
                exit 1
              fi
          fi
          # Ensure CURRENT_CHUNK_SIZE is a positive integer
          if ! [[ "$CURRENT_CHUNK_SIZE" =~ ^[1-9][0-9]*$ ]]; then
            echo "Error: LINES_PER_CHUNK ('$CURRENT_CHUNK_SIZE') is not a positive integer. Defaulting to 1000."
            CURRENT_CHUNK_SIZE=1000
          fi
          
          if [ "$total_lines_numeric" -le "$CURRENT_CHUNK_SIZE" ]; then
            cp "${INPUT_FILE}" "${CHUNKS_DIR}/chunk_01.txt"
          else
            split -l "$CURRENT_CHUNK_SIZE" -d --additional-suffix=".txt" \
              "${INPUT_FILE}" "${CHUNKS_DIR}/chunk_"
          fi
          echo "Chunks created for $DOMAIN:"
          ls -1 "${CHUNKS_DIR}"                  
      - name: Run dnsx on each chunk (3 parallel jobs)
        run: |
          DOMAIN="${{ matrix.domain }}"
          CHUNKS_DIR="work/${DOMAIN}/chunks"
          OUT_DIR="work/${DOMAIN}/dnsx_out"
          mkdir -p "${OUT_DIR}"

          export DNSX_THREADS=50
          export DNSX_TIMEOUT=5s

          echo "Launching dnsx jobs in parallel (up to 3 at a time)..."
          ls "${CHUNKS_DIR}/chunk_"*.txt \
            | parallel -j 3 \
              'dnsx -l {} \
                -a -resp \
                -json \
                -o "'"${OUT_DIR}"'/dnsx_$(basename {}).json"'

      - name: Combine JSON outputs into single dnsx.json
        run: |
          DOMAIN="${{ matrix.domain }}"
          OUT_DIR="work/${DOMAIN}/dnsx_out"
          COMBINED="results/${DOMAIN}/dnsx.json"
          echo "Combining JSON files for $DOMAIN..."
          if ls "${OUT_DIR}"/dnsx_*.json 1> /dev/null 2>&1; then
            jq -s '.' "${OUT_DIR}"/dnsx_*.json > "${COMBINED}"
          else
            echo "[]" > "${COMBINED}"
          fi
          echo "Created combined JSON at ${COMBINED}"

      - name: Upload dnsx.json as artifact for ${{ matrix.domain }}
        uses: actions/upload-artifact@v4
        with:
          name: dnsx_${{ matrix.domain }}
          path: results/${{ matrix.domain }}/dnsx.json
          retention-days: 1

      - name: Commit and push dnsx.json back to store-recon
        run: |

          DOMAIN="${{ matrix.domain }}"
          SAFE_DOMAIN=$(echo "$DOMAIN" | tr '.' '_')
          TARGET_PATH="results/${DOMAIN}/dnsx.json"

          # Configure Git inside the checked‐out store-recon folder
          cd store-recon
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

          # Make sure we are on main and up-to-date
          git fetch origin main
          git checkout main
          git reset --hard origin/main

          # Copy the newly combined JSON from the workspace into store-recon's results/<domain>/
          mkdir -p "results/${DOMAIN}"
          cp "../results/${DOMAIN}/dnsx.json" "${TARGET_PATH}"

          git add "${TARGET_PATH}"
          if git diff --cached --quiet; then
            echo "No changes to dnsx.json for ${DOMAIN}; skipping commit."
            exit 0
          fi

          git commit -m "Add/update dnsx.json for ${DOMAIN}"

          # Push back using the PAT via HTTPS
          git remote set-url origin \
            https://x-access-token:${{ secrets.STORE_RECON_PAT }}@github.com/pushrockzz/store-recon.git
          git push origin HEAD:main
